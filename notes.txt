function SingleAndDoubleClick(element, helperFunc, cssClass) {
    let allElementsAlike = document.querySelectorAll(element);
    let clickTimeout = null;  // This will store the setTimeout reference

    allElementsAlike.forEach(ele => {
        ele.addEventListener('click', function(e) {
            if (clickTimeout === null) {
                // First click
                clickTimeout = setTimeout(() => {
                    // Single click action
                    clickTimeout = null;
                    // TODO: Insert your single click logic here
                    helperFunc(this);
                }, 300); // 300ms to wait for a potential second click
            } else {
                // Second click detected before timeout completed
                clearTimeout(clickTimeout); // clear the timeout
                clickTimeout = null;
                
                // Logic for edit functionality
                const inputValue = this.innerText;
                const inputElem = document.createElement('textarea');

                inputElem.classList.add(cssClass);
                inputElem.value = inputValue;

                // Function to revert input back to the title
                const revertToTitle = () => {
                    ele.innerText = inputElem.value;
                    if (inputElem.parentNode) {
                        inputElem.parentNode.replaceChild(ele, inputElem);
                    }
                }

                inputElem.addEventListener('blur', revertToTitle);
                inputElem.addEventListener('keydown', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        revertToTitle();
                    }
                });

                this.parentNode.replaceChild(inputElem, ele);
                inputElem.focus();

                //set dynamic height on textarea 
                inputElem.addEventListener('input', function() {
                    this.style.height = 'auto';  // Reset the height
                    this.style.height = this.scrollHeight + 'px';  // Set it to its scroll height
                });

                // Initial adjust if there's default text
                inputElem.style.height = `${textarea.scrollHeight}px`;

            }
        });
    });
}

SingleAndDoubleClick('.spell-lvl-slots .spell .title', FirstClickShowDescriptionHelper, 'title');
SingleAndDoubleClick('.spell-lvl-slots .spell .description', blank, 'description');


function blank(thiS) {
    return;
}

let activeSpellOneClick;
function FirstClickShowDescriptionHelper(thiS) {

    //handle hiding the description when clicking elsewhere
    if (activeSpellOneClick && thiS !== activeSpellOneClick) {
        activeSpellOneClick.closest('.description').style.display = 'none';
    }

    const description = thiS.nextElementSibling;
    activeSpellOneClick = this;
    if (description.style.display === 'inline-block') {
        description.style.display = 'none';
    } else {
        // Hide all other descriptions
        document.querySelectorAll('.description').forEach(desc => desc.style.display = 'none');

        // Show this description
        description.style.display = 'inline-block';
    }
}